//
// Generated file, do not edit! Created by nedtool 5.6 from PacketRecord.msg.
//

#ifndef __PACKETRECORD_M_H
#define __PACKETRECORD_M_H

#if defined(__clang__)
#  pragma clang diagnostic ignored "-Wreserved-id-macro"
#endif
#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0506
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>PacketRecord.msg:1</tt> by nedtool.
 * <pre>
 * packet PacketRecord
 * {
 *     int ovhdBits;
 *     int userBits;
 *     bool errorFlag;
 *     int sequenceNumber;
 * }
 * </pre>
 */
class PacketRecord : public ::omnetpp::cPacket
{
  protected:
    int ovhdBits;
    int userBits;
    bool errorFlag;
    int sequenceNumber;

  private:
    void copy(const PacketRecord& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const PacketRecord&);

  public:
    PacketRecord(const char *name=nullptr, short kind=0);
    PacketRecord(const PacketRecord& other);
    virtual ~PacketRecord();
    PacketRecord& operator=(const PacketRecord& other);
    virtual PacketRecord *dup() const override {return new PacketRecord(*this);}
    virtual void parsimPack(omnetpp::cCommBuffer *b) const override;
    virtual void parsimUnpack(omnetpp::cCommBuffer *b) override;

    // field getter/setter methods
    virtual int getOvhdBits() const;
    virtual void setOvhdBits(int ovhdBits);
    virtual int getUserBits() const;
    virtual void setUserBits(int userBits);
    virtual bool getErrorFlag() const;
    virtual void setErrorFlag(bool errorFlag);
    virtual int getSequenceNumber() const;
    virtual void setSequenceNumber(int sequenceNumber);
};

inline void doParsimPacking(omnetpp::cCommBuffer *b, const PacketRecord& obj) {obj.parsimPack(b);}
inline void doParsimUnpacking(omnetpp::cCommBuffer *b, PacketRecord& obj) {obj.parsimUnpack(b);}


#endif // ifndef __PACKETRECORD_M_H

